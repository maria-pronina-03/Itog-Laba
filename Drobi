package Calcul;

public class Drobi implements Number {
    private final int numerator;
    private final int denominator;
    public Drobi (int numerator, int denominator) throws IllegalArgumentException{
        if(denominator == 0) throw new IllegalArgumentException("Знаменатель не может быть равен 0");
        this.numerator = numerator;
        this.denominator = denominator;
    }
    public static Drobi parse(String frac) throws IllegalArgumentException, NumberFormatException {
        String[] nums = frac.split("/");
        try {
            int denominator = Integer.parseInt(nums[1]);
            if (denominator == 0) throw new IllegalArgumentException("Знаменатель не равен 0"); //проверка знаменателя
            int nominator = Integer.parseInt(nums[0]);
            return new Drobi(nominator, denominator);
        }
        catch (NumberFormatException ex) {
            throw new IllegalArgumentException("Некорректное выражение");
        }
    }
    public static boolean tryParse(String frac) {
        String[] nums = frac.split("/");
        return nums.length == 2;
    }

    public double sum(Number number) throws IllegalArgumentException {
        if (number == null) throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if (!(number instanceof Drobi)) throw new IllegalArgumentException("Некорректное выражение");
        return this.getValue() + number.getValue();
    }

    public Number add(Number number) throws IllegalArgumentException {
        if (number == null) throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if (!(number instanceof Drobi)) throw new IllegalArgumentException("Некорректное выражение");
        if (denominator != ((Drobi) number).denominator) {
            return new Drobi(numerator * ((Drobi) number).denominator
                    + ((Drobi) number).numerator * denominator, denominator * ((Drobi) number).denominator);
        }
        else {
            return new Drobi(numerator + ((Drobi) number).numerator, denominator);
        }
    }
    public static Drobi add(Drobi number, Drobi number2) throws IllegalArgumentException {
        if (number == null || number2 == null)
            throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");

        if (number.denominator != number2.denominator) {
            return new Drobi(number.numerator * number2.denominator
                    + number2.numerator * number.denominator, number.denominator * number2.denominator);
        }
        else {
            return new Drobi(number.numerator + number2.numerator, number.denominator);
        }
    }

    public double sub(Number number) {
        if (number == null) throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if (!(number instanceof Drobi)) throw new IllegalArgumentException("Некорректное выражение");
        return getValue() - number.getValue();
    }

    public Number subtract(Number number) {
        if (number == null) throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if (!(number instanceof Drobi)) throw new IllegalArgumentException("Некорректное выражение");
        if (denominator != ((Drobi) number).denominator) {
            return new Drobi(numerator * ((Drobi) number).denominator
                    - ((Drobi) number).numerator * denominator, denominator * ((Drobi) number).denominator);
        }
        else {
            return new Drobi(numerator - ((Drobi) number).numerator, denominator);
        }
    }
    public static Drobi subtract(Drobi number, Drobi number2) throws IllegalArgumentException {
        if (number == null || number2 == null)
            throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");

        if (number.denominator != number2.denominator) {
            return new Drobi(number.numerator * number2.denominator
                    - number2.numerator * number.denominator, number.denominator * number2.denominator);
        } else {
            return new Drobi(number.numerator - number2.numerator, number.denominator);
        }
    }


    public double mult(Number number) throws IllegalArgumentException{
        if (number == null) throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if (!(number instanceof Drobi)) throw new IllegalArgumentException("Некорректное выражение");
        return getValue() * number.getValue();
    }


    public Number multiplication(Number number) throws IllegalArgumentException{
        if (number == null) throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if (!(number instanceof Drobi)) throw new IllegalArgumentException("Некорректное выражение");
        return new Drobi(numerator * ((Drobi) number).numerator, denominator * ((Drobi) number).denominator);
    }

    public static Number multiplication(Drobi number, Drobi number2) throws IllegalArgumentException{
        if (number == null || number2 == null)
            throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        return new Drobi(number.numerator * number2.numerator, number.denominator * number2.denominator);
    }


    public double divide(Number number) {
        if (number == null) throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if (!(number instanceof Drobi)) throw new IllegalArgumentException("Некорректное выражение");
        if(number.getValue() == 0) throw new ArithmeticException("Деление на 0");
        return getValue() / number.getValue();
    }


    public Number division(Number number) {
        if (number == null) throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if (!(number instanceof Drobi)) throw new IllegalArgumentException("Некорректное выражение");
        if(number.getValue() == 0) throw new ArithmeticException("Деление на 0");
        return new Drobi(numerator * ((Drobi) number).denominator, denominator * ((Drobi) number).numerator);
    }

    public static Number division(Drobi number, Drobi number2) throws IllegalArgumentException{
        if (number == null || number2 == null)
            throw new IllegalArgumentException("Некорректное выражение (нет аргумента)");
        if(number2.getValue() == 0) throw new ArithmeticException("Деление на 0");
        return new Drobi(number.numerator * number2.denominator, number.denominator * number2.numerator);
    }

    public static Drobi reduce(Drobi fraction) {
        int numerator = fraction.numerator;
        int denominator = fraction.denominator;
        for(int i = 2; i <= Math.abs(denominator); i++) {
            if(denominator % i == 0 && numerator % i == 0) {
                numerator /= i;
                denominator /= i;
                i = 1;
            }
        }
        if(numerator < 0 && denominator < 0) return new Drobi(-numerator, -denominator);
        if(numerator < 0 || denominator < 0) return new Drobi(-Math.abs(numerator), Math.abs(denominator));
        return new Drobi(numerator, denominator);
    }


    public double getValue() throws ArithmeticException {
        if (denominator == 0) throw new ArithmeticException("Знаменатель равен 0");
        return (double) numerator / (double) denominator;
    }


    public String toString() {
        return numerator + "/" + denominator;
    }
}
